{"version":3,"sources":["dTree.min.js","dTree.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","define","amd","dTree","this","TreeBuilder","root","siblings","opts","DEBUG_LEVEL","debug","allNodes","_flatten","visibleNodes","_","filter","n","hidden","nodeSize","callbacks","nodeWidth","textRenderer","value","width","margin","left","right","height","top","bottom","zoom","d3","scaleExtent","on","svg","attr","event","transform","translate","select","append","call","tree","separation","a","b","data","_update","source","treenodes","links","_linkSiblings","selectAll","enter","l","noParent","styles","linage","_elbow","nodes","descendants","d","number","exMarriage","marriage","bind","_siblingLine","x","cWidth","y","cHeight","id","html","nodeRenderer","name","extra","textClass","nodeClick","recurse","node","children","forEach","push","ny","linedata","fun","line","curve","curveStepAfter","start","v","end","marriageId","marriageNode","find","get","maxHeight","tmpSvg","document","createElement","body","appendChild","map","container","setAttribute","style","visibility","maxWidth","text","innerHTML","offsetHeight","removeChild","Math","max","nodeClass","msg","console","log","VERSION","init","options","arguments","undefined","defaultsDeep","_nodeRenderer","_nodeSize","nodeSorter","aName","aExtra","bName","bExtra","_textRenderer","_preprocess","treeBuilder","create","reconstructTree","person","parent","class","depthOffset","pushNode","_sortPersons","child","_sortMarriages","marriages","index","m","sp","spouse","hierarchy","persons","sort","Array","isArray","marriageA","marriageB"],"mappings":"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","file":"dTree.min.js","sourcesContent":["var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.dTree = factory();\n})(this, function () {\n  'use strict';\n\n  // jshint esversion: 6\n\n  var TreeBuilder = (function () {\n    function TreeBuilder(root, siblings, opts) {\n      _classCallCheck(this, TreeBuilder);\n\n      TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\n\n      this.root = root;\n      this.siblings = siblings;\n      this.opts = opts;\n\n      // flatten nodes\n      this.allNodes = this._flatten(this.root);\n\n      // Calculate node size\n      var visibleNodes = _.filter(this.allNodes, function (n) {\n        return !n.hidden;\n      });\n      this.nodeSize = opts.callbacks.nodeSize(visibleNodes, opts.nodeWidth, opts.callbacks.textRenderer);\n    }\n\n    _createClass(TreeBuilder, [{\n      key: 'create',\n      value: function create() {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var width = opts.width + opts.margin.left + opts.margin.right;\n        var height = opts.height + opts.margin.top + opts.margin.bottom;\n\n        var zoom = d3.zoom().scaleExtent([0.1, 10]).on('zoom', function () {\n          svg.attr('transform', d3.event.transform.translate(width / 2, opts.margin.top));\n        });\n\n        //make an SVG\n        var svg = this.svg = d3.select(opts.target).append('svg').attr('width', width).attr('height', height).call(zoom).append('g').attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\n\n        // Compute the layout.\n        this.tree = d3.tree().nodeSize([nodeSize[0] * 2, nodeSize[1] * 2.5]);\n\n        this.tree.separation(function separation(a, b) {\n          if (a.data.hidden || b.data.hidden) {\n            return 0.3;\n          } else {\n            return 0.6;\n          }\n        });\n\n        this._update(this.root);\n      }\n    }, {\n      key: '_update',\n      value: function _update(source) {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var treenodes = this.tree(source);\n        var links = treenodes.links();\n\n        // Create the link lines.\n        this._linkSiblings(); //  I moved this line before _elbow() for Single parent support\n        this.svg.selectAll('.link').data(links).enter()\n        // filter links with no parents to prevent empty nodes\n        .filter(function (l) {\n          return !l.target.data.noParent;\n        }).append('path').attr('class', opts.styles.linage).attr('d', this._elbow);\n\n        var nodes = this.svg.selectAll('.node').data(treenodes.descendants()).enter();\n\n        // Draw siblings (marriage)\n        this.svg.selectAll('.sibling').data(this.siblings).enter().append('path').attr('class', function (d) {\n          // Support separate line-style for ex-spouse\n          return d.number > 0 ? opts.styles.exMarriage : opts.styles.marriage;\n        }).attr('d', _.bind(this._siblingLine, this));\n\n        // Create the node rectangles.\n        nodes.append('foreignObject').filter(function (d) {\n          return d.data.hidden ? false : true;\n        }).attr('x', function (d) {\n          return d.x - d.cWidth / 2 + 'px';\n        }).attr('y', function (d) {\n          var y = d.y - d.cHeight / 2;\n          // Move up ex-spouses' node\n          if (d.number > 0) {\n            y -= 10;\n          }\n          return y + 'px';\n        }).attr('width', function (d) {\n          return d.cWidth + 'px';\n        }).attr('height', function (d) {\n          return d.cHeight + 'px';\n        }).attr('id', function (d) {\n          return d.id;\n        }).html(function (d) {\n          return opts.callbacks.nodeRenderer(d.data.name, d.x, d.y, nodeSize[0], nodeSize[1], d.data.extra, d.data.id, d.data['class'], d.data.textClass, opts.callbacks.textRenderer);\n        }).on('click', function (d) {\n          if (d.data.hidden) {\n            return;\n          }\n          opts.callbacks.nodeClick(d.data.name, d.data.extra, d.data.id);\n        });\n      }\n    }, {\n      key: '_flatten',\n      value: function _flatten(root) {\n        var n = [];\n        var i = 0;\n\n        function recurse(node) {\n          if (node.children) {\n            node.children.forEach(recurse);\n          }\n          if (!node.id) {\n            node.id = ++i;\n          }\n          n.push(node);\n        }\n        recurse(root);\n        return n;\n      }\n    }, {\n      key: '_elbow',\n      value: function _elbow(d, i) {\n        if (d.target.data.noParent) {\n          return 'M0,0L0,0';\n        }\n        var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n        var linedata = [{\n          x: d.target.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: ny\n        }, {\n          x: d.source.x,\n          y: d.source.y\n        }];\n\n        var fun = d3.line().curve(d3.curveStepAfter).x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        });\n        return fun(linedata);\n      }\n    }, {\n      key: '_linkSiblings',\n      value: function _linkSiblings() {\n\n        var allNodes = this.allNodes;\n\n        _.forEach(this.siblings, function (d) {\n          var start = allNodes.filter(function (v) {\n            return d.source.id == v.data.id;\n          });\n          var end = allNodes.filter(function (v) {\n            return d.target.id == v.data.id;\n          });\n\n          // Move up line for ex-spouse\n          if (d.number > 0) {\n            d.target.y -= 3;\n            end[0].y -= 3;\n          }\n          d.source.x = start[0].x;\n          d.source.y = start[0].y;\n          d.target.x = end[0].x;\n          d.target.y = end[0].y;\n\n          var marriageId = start[0].data.marriageNode != null ? start[0].data.marriageNode.id : end[0].data.marriageNode.id;\n          var marriageNode = allNodes.find(function (n) {\n            return n.data.id == marriageId;\n          });\n          d.source.marriageNode = marriageNode;\n          d.target.marriageNode = marriageNode;\n\n          if (_.get(end[0].data, 'hidden', false)) {\n            // Hide horizontal line for hidden spouse\n            d.target.x = start[0].x;\n            d.target.y = start[0].y;\n            marriageNode.x = start[0].x;\n            marriageNode.y = start[0].y;\n          }\n        });\n      }\n    }, {\n      key: '_siblingLine',\n      value: function _siblingLine(d, i) {\n\n        var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n        var nodeWidth = this.nodeSize[0];\n        var nodeHeight = this.nodeSize[1];\n\n        // I commented in order to use different ex-spouse drawing\n        // Not first marriage\n        // if (d.number > 0) {\n        //   ny -= nodeHeight * 8 / 10;\n        // }\n\n        var linedata = d.source.x === d.target.x && d.source.y === d.target.y ?\n        // If spouse is hidden\n        [] : d.number > 0 ? // if it is an ex-spouse\n        [{\n          x: d.source.x,\n          y: d.source.y\n        }, {\n          x: d.source.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: d.target.y\n        }] : // regular case\n        [{\n          x: d.source.x,\n          y: d.source.y\n        }, {\n          x: d.source.x + nodeWidth * 6 / 10,\n          y: d.source.y\n        }, {\n          x: d.source.x + nodeWidth * 6 / 10,\n          y: ny\n        }, {\n          x: d.target.marriageNode.x,\n          y: ny\n        }, {\n          x: d.target.marriageNode.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: d.target.y\n        }];\n\n        var fun = d3.line().curve(d3.curveStepAfter).x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        });\n        return fun(linedata);\n      }\n    }], [{\n      key: '_nodeSize',\n      value: function _nodeSize(nodes, width, textRenderer) {\n        var maxWidth = 0;\n        var maxHeight = 0;\n        var tmpSvg = document.createElement('svg');\n        document.body.appendChild(tmpSvg);\n\n        _.map(nodes, function (n) {\n          var container = document.createElement('div');\n          container.setAttribute('class', n.data['class']);\n          container.style.visibility = 'hidden';\n          container.style.maxWidth = width + 'px';\n\n          var text = textRenderer(n.data.name, n.data.extra, n.data.textClass);\n          container.innerHTML = text;\n\n          tmpSvg.appendChild(container);\n          var height = container.offsetHeight;\n          tmpSvg.removeChild(container);\n\n          maxHeight = Math.max(maxHeight, height);\n          n.cHeight = height;\n          if (n.data.hidden) {\n            n.cWidth = 0;\n          } else {\n            n.cWidth = width;\n          }\n        });\n        document.body.removeChild(tmpSvg);\n\n        return [width, maxHeight];\n      }\n    }, {\n      key: '_nodeRenderer',\n      value: function _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n        var node = '';\n        node += '<div ';\n        node += 'style=\"height:100%;width:100%;\" ';\n        node += 'class=\"' + nodeClass + '\" ';\n        node += 'id=\"node' + id + '\">\\n';\n        node += textRenderer(name, extra, textClass);\n        node += '</div>';\n        return node;\n      }\n    }, {\n      key: '_textRenderer',\n      value: function _textRenderer(name, extra, textClass) {\n        var node = '';\n        node += '<p ';\n        node += 'align=\"center\" ';\n        node += 'class=\"' + textClass + '\">\\n';\n        node += name;\n        node += '</p>\\n';\n        return node;\n      }\n    }, {\n      key: '_debug',\n      value: function _debug(msg) {\n        if (TreeBuilder.DEBUG_LEVEL > 0) {\n          console.log(msg);\n        }\n      }\n    }]);\n\n    return TreeBuilder;\n  })();\n\n  var dTree = {\n\n    VERSION: '2.0.2',\n\n    init: function init(data) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var opts = _.defaultsDeep(options || {}, {\n        target: '#graph',\n        debug: false,\n        width: 600,\n        height: 600,\n        callbacks: {\n          nodeClick: function nodeClick(name, extra, id) {},\n          nodeRenderer: function nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n            return TreeBuilder._nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer);\n          },\n          nodeSize: function nodeSize(nodes, width, textRenderer) {\n            return TreeBuilder._nodeSize(nodes, width, textRenderer);\n          },\n          nodeSorter: function nodeSorter(aName, aExtra, bName, bExtra) {\n            return 0;\n          },\n          textRenderer: function textRenderer(name, extra, textClass) {\n            return TreeBuilder._textRenderer(name, extra, textClass);\n          }\n        },\n        margin: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        nodeWidth: 100,\n        styles: {\n          node: 'node',\n          linage: 'linage',\n          marriage: 'marriage',\n          text: 'nodeText'\n        }\n      });\n\n      var data = this._preprocess(data, opts);\n      var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\n      treeBuilder.create();\n    },\n\n    _preprocess: function _preprocess(data, opts) {\n\n      var siblings = [];\n      var id = 0;\n\n      var root = {\n        name: '',\n        id: id++,\n        hidden: true,\n        children: []\n      };\n\n      var reconstructTree = function reconstructTree(person, parent) {\n\n        // convert to person to d3 node\n        var node = {\n          name: person.name,\n          id: id++,\n          hidden: false,\n          children: [],\n          extra: person.extra,\n          textClass: person.textClass ? person.textClass : opts.styles.text,\n          'class': person['class'] ? person['class'] : opts.styles.node\n        };\n\n        // hide linages to the hidden root node\n        if (parent == root) {\n          node.noParent = true;\n        }\n\n        // apply depth offset\n        for (var i = 0; i < person.depthOffset; i++) {\n          var pushNode = {\n            name: '',\n            id: id++,\n            hidden: true,\n            children: [],\n            noParent: node.noParent\n          };\n          parent.children.push(pushNode);\n          parent = pushNode;\n        }\n\n        // sort children\n        dTree._sortPersons(person.children, opts);\n\n        // add \"direct\" children\n        _.forEach(person.children, function (child) {\n          reconstructTree(child, node);\n        });\n\n        parent.children.push(node);\n\n        //sort marriages\n        dTree._sortMarriages(person.marriages, opts);\n\n        // go through marriage\n        _.forEach(person.marriages, function (marriage, index) {\n\n          var m = {\n            name: '',\n            id: id++,\n            hidden: true,\n            noParent: true,\n            children: [],\n            extra: marriage.extra\n          };\n\n          var sp = marriage.spouse;\n\n          var spouse = {\n            name: sp.name,\n            id: id++,\n            hidden: _.get(marriage.spouse, 'hidden', false),\n            noParent: true,\n            children: [],\n            textClass: sp.textClass ? sp.textClass : opts.styles.text,\n            'class': sp['class'] ? sp['class'] : opts.styles.node,\n            extra: sp.extra,\n            marriageNode: m\n          };\n\n          parent.children.push(m, spouse);\n\n          dTree._sortPersons(marriage.children, opts);\n          _.forEach(marriage.children, function (child) {\n            reconstructTree(child, m);\n          });\n\n          siblings.push({\n            source: {\n              id: node.id\n            },\n            target: {\n              id: spouse.id\n            },\n            number: index\n          });\n        });\n      };\n\n      _.forEach(data, function (person) {\n        reconstructTree(person, root);\n      });\n\n      return {\n        root: d3.hierarchy(root),\n        siblings: siblings\n      };\n    },\n\n    _sortPersons: function _sortPersons(persons, opts) {\n      if (persons != undefined) {\n        persons.sort(function (a, b) {\n          return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return persons;\n    },\n\n    _sortMarriages: function _sortMarriages(marriages, opts) {\n      if (marriages != undefined && Array.isArray(marriages)) {\n        marriages.sort(function (marriageA, marriageB) {\n          var a = marriageA.spouse;\n          var b = marriageB.spouse;\n          return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return marriages;\n    }\n\n  };\n\n  return dTree;\n});\n//# sourceMappingURL=dTree.js.map\n","(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n\ttypeof define === 'function' && define.amd ? define(factory) :\r\n\t(global.dTree = factory());\r\n}(this, (function () { 'use strict';\r\n\r\n// jshint esversion: 6\r\nclass TreeBuilder {\r\n\r\n  constructor(root, siblings, opts) {\r\n    TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\r\n\r\n    this.root = root;\r\n    this.siblings = siblings;\r\n    this.opts = opts;\r\n\r\n    // flatten nodes\r\n    this.allNodes = this._flatten(this.root);\r\n\r\n    // Calculate node size\r\n    let visibleNodes = _.filter(this.allNodes, function(n) {\r\n      return !n.hidden;\r\n    });\r\n    this.nodeSize = opts.callbacks.nodeSize(visibleNodes,\r\n      opts.nodeWidth, opts.callbacks.textRenderer);\r\n  }\r\n\r\n  create() {\r\n\r\n    let opts = this.opts;\r\n    let allNodes = this.allNodes;\r\n    let nodeSize = this.nodeSize;\r\n\r\n    let width = opts.width + opts.margin.left + opts.margin.right;\r\n    let height = opts.height + opts.margin.top + opts.margin.bottom;\r\n\r\n    let zoom = d3.zoom()\r\n      .scaleExtent([0.1, 10])\r\n      .on('zoom', function() {\r\n        svg.attr('transform', d3.event.transform.translate(width / 2, opts.margin.top));\r\n      });\r\n\r\n    //make an SVG\r\n    let svg = this.svg = d3.select(opts.target)\r\n      .append('svg')\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n      .call(zoom)\r\n      .append('g')\r\n      .attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\r\n\r\n    // Compute the layout.\r\n    this.tree = d3.tree()\r\n      .nodeSize([nodeSize[0] * 2, nodeSize[1] * 2.5]);\r\n\r\n    this.tree.separation(function separation(a, b) {\r\n      if (a.data.hidden || b.data.hidden) {\r\n        return 0.3;\r\n      } else {\r\n        return 0.6;\r\n      }\r\n    });\r\n\r\n    this._update(this.root);\r\n\r\n  }\r\n\r\n  _update(source) {\r\n\r\n    let opts = this.opts;\r\n    let allNodes = this.allNodes;\r\n    let nodeSize = this.nodeSize;\r\n\r\n    let treenodes = this.tree(source);\r\n    let links = treenodes.links();\r\n\r\n    // Create the link lines.\r\n    this._linkSiblings(); //  I moved this line before _elbow() for Single parent support\r\n    this.svg.selectAll('.link')\r\n      .data(links)\r\n      .enter()\r\n      // filter links with no parents to prevent empty nodes\r\n      .filter(function(l) {\r\n        return !l.target.data.noParent;\r\n      })\r\n      .append('path')\r\n      .attr('class', opts.styles.linage)\r\n      .attr('d', this._elbow);\r\n\r\n    let nodes = this.svg.selectAll('.node')\r\n      .data(treenodes.descendants())\r\n      .enter();\r\n\r\n    // Draw siblings (marriage)\r\n    this.svg.selectAll('.sibling')\r\n      .data(this.siblings)\r\n      .enter()\r\n      .append('path')\r\n      .attr('class', function(d) {\r\n        // Support separate line-style for ex-spouse\r\n        return d.number > 0 ? opts.styles.exMarriage : opts.styles.marriage;\r\n      })\r\n      .attr('d', _.bind(this._siblingLine, this));\r\n\r\n    // Create the node rectangles.\r\n    nodes.append('foreignObject')\r\n      .filter(function(d) {\r\n        return d.data.hidden ? false : true;\r\n      })\r\n      .attr('x', function(d) {\r\n        return d.x - d.cWidth / 2 + 'px';\r\n      })\r\n      .attr('y', function(d) {\r\n        let y = d.y - d.cHeight / 2;\r\n        // Move up ex-spouses' node\r\n        if (d.number > 0) {\r\n          y -= 10;\r\n        }\r\n        return y + 'px';\r\n      })\r\n      .attr('width', function(d) {\r\n        return d.cWidth + 'px';\r\n      })\r\n      .attr('height', function(d) {\r\n        return d.cHeight + 'px';\r\n      })\r\n      .attr('id', function(d) {\r\n        return d.id;\r\n      })\r\n      .html(function(d) {\r\n        return opts.callbacks.nodeRenderer(\r\n          d.data.name,\r\n          d.x,\r\n          d.y,\r\n          nodeSize[0],\r\n          nodeSize[1],\r\n          d.data.extra,\r\n          d.data.id,\r\n          d.data.class,\r\n          d.data.textClass,\r\n          opts.callbacks.textRenderer);\r\n      })\r\n      .on('click', function(d)  {\r\n        if (d.data.hidden) {\r\n          return;\r\n        }\r\n        opts.callbacks.nodeClick(d.data.name, d.data.extra, d.data.id);\r\n      });\r\n  }\r\n\r\n  _flatten(root) {\r\n    let n = [];\r\n    let i = 0;\r\n\r\n    function recurse(node) {\r\n      if (node.children) {\r\n        node.children.forEach(recurse);\r\n      }\r\n      if (!node.id) {\r\n        node.id = ++i;\r\n      }\r\n      n.push(node);\r\n    }\r\n    recurse(root);\r\n    return n;\r\n  }\r\n\r\n  _elbow(d, i) {\r\n    if (d.target.data.noParent) {\r\n      return 'M0,0L0,0';\r\n    }\r\n    let ny = d.target.y + (d.source.y - d.target.y) * 0.50;\r\n\r\n    let linedata = [{\r\n      x: d.target.x,\r\n      y: d.target.y\r\n    }, {\r\n      x: d.target.x,\r\n      y: ny\r\n    }, {\r\n      x: d.source.x,\r\n      y: d.source.y\r\n    }];\r\n\r\n    let fun = d3.line().curve(d3.curveStepAfter)\r\n      .x(function(d) {\r\n        return d.x;\r\n      })\r\n      .y(function(d) {\r\n        return d.y;\r\n      });\r\n    return fun(linedata);\r\n  }\r\n\r\n  _linkSiblings() {\r\n\r\n    let allNodes = this.allNodes;\r\n\r\n    _.forEach(this.siblings, function(d) {\r\n      let start = allNodes.filter(function(v) {\r\n        return d.source.id == v.data.id;\r\n      });\r\n      let end = allNodes.filter(function(v) {\r\n        return d.target.id == v.data.id;\r\n      });\r\n\r\n      // Move up line for ex-spouse\r\n      if (d.number > 0) {\r\n        d.target.y -= 3;\r\n        end[0].y -= 3;\r\n      }\r\n      d.source.x = start[0].x;\r\n      d.source.y = start[0].y;\r\n      d.target.x = end[0].x;\r\n      d.target.y = end[0].y;\r\n\r\n      let marriageId = (start[0].data.marriageNode != null ?\r\n                        start[0].data.marriageNode.id :\r\n                        end[0].data.marriageNode.id);\r\n      let marriageNode = allNodes.find(function(n) {\r\n        return n.data.id == marriageId;\r\n      });\r\n      d.source.marriageNode = marriageNode;\r\n      d.target.marriageNode = marriageNode;\r\n\r\n      if (_.get(end[0].data, 'hidden', false)) {\r\n        // Hide horizontal line for hidden spouse\r\n        d.target.x = start[0].x;\r\n        d.target.y = start[0].y;\r\n        marriageNode.x = start[0].x;\r\n        marriageNode.y = start[0].y;\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  _siblingLine(d, i) {\r\n\r\n    let ny = d.target.y + (d.source.y - d.target.y) * 0.50;\r\n    let nodeWidth = this.nodeSize[0];\r\n    let nodeHeight = this.nodeSize[1];\r\n\r\n    // I commented in order to use different ex-spouse drawing\r\n    // Not first marriage\r\n    // if (d.number > 0) {\r\n    //   ny -= nodeHeight * 8 / 10;\r\n    // }\r\n\r\n    let linedata = d.source.x === d.target.x && d.source.y === d.target.y ?\r\n      // If spouse is hidden\r\n      [] :\r\n      d.number > 0 ?  // if it is an ex-spouse\r\n        [{\r\n          x: d.source.x,\r\n          y: d.source.y\r\n        }, {\r\n          x: d.source.x,\r\n          y: d.target.y\r\n        }, {\r\n          x: d.target.x,\r\n          y: d.target.y\r\n        }] :  // regular case\r\n        [{\r\n          x: d.source.x,\r\n          y: d.source.y\r\n        }, {\r\n          x: d.source.x + nodeWidth * 6 / 10,\r\n          y: d.source.y\r\n        }, {\r\n          x: d.source.x + nodeWidth * 6 / 10,\r\n          y: ny\r\n        }, {\r\n          x: d.target.marriageNode.x,\r\n          y: ny\r\n        }, {\r\n          x: d.target.marriageNode.x,\r\n          y: d.target.y\r\n        }, {\r\n          x: d.target.x,\r\n          y: d.target.y\r\n        }];\r\n\r\n    let fun = d3.line().curve(d3.curveStepAfter)\r\n      .x(function(d) {\r\n        return d.x;\r\n      })\r\n      .y(function(d) {\r\n        return d.y;\r\n      });\r\n    return fun(linedata);\r\n  }\r\n\r\n  static _nodeSize(nodes, width, textRenderer) {\r\n    let maxWidth = 0;\r\n    let maxHeight = 0;\r\n    let tmpSvg = document.createElement('svg');\r\n    document.body.appendChild(tmpSvg);\r\n\r\n    _.map(nodes, function(n) {\r\n      let container = document.createElement('div');\r\n      container.setAttribute('class', n.data.class);\r\n      container.style.visibility = 'hidden';\r\n      container.style.maxWidth = width + 'px';\r\n\r\n      let text = textRenderer(n.data.name, n.data.extra, n.data.textClass);\r\n      container.innerHTML = text;\r\n\r\n      tmpSvg.appendChild(container);\r\n      let height = container.offsetHeight;\r\n      tmpSvg.removeChild(container);\r\n\r\n      maxHeight = Math.max(maxHeight, height);\r\n      n.cHeight = height;\r\n      if (n.data.hidden) {\r\n        n.cWidth = 0;\r\n      } else {\r\n        n.cWidth = width;\r\n      }\r\n    });\r\n    document.body.removeChild(tmpSvg);\r\n\r\n    return [width, maxHeight];\r\n  }\r\n\r\n  static _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\r\n    let node = '';\r\n    node += '<div ';\r\n    node += 'style=\"height:100%;width:100%;\" ';\r\n    node += 'class=\"' + nodeClass + '\" ';\r\n    node += 'id=\"node' + id + '\">\\n';\r\n    node += textRenderer(name, extra, textClass);\r\n    node += '</div>';\r\n    return node;\r\n  }\r\n\r\n  static _textRenderer(name, extra, textClass) {\r\n    let node = '';\r\n    node += '<p ';\r\n    node += 'align=\"center\" ';\r\n    node += 'class=\"' + textClass + '\">\\n';\r\n    node += name;\r\n    node += '</p>\\n';\r\n    return node;\r\n  }\r\n\r\n  static _debug(msg) {\r\n    if (TreeBuilder.DEBUG_LEVEL > 0)  {\r\n      console.log(msg);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nconst dTree = {\r\n\r\n  VERSION: '2.0.2',\r\n\r\n  init: function(data, options = {}) {\r\n\r\n    var opts = _.defaultsDeep(options || {}, {\r\n      target: '#graph',\r\n      debug: false,\r\n      width: 600,\r\n      height: 600,\r\n      callbacks: {\r\n        nodeClick: function(name, extra, id) {},\r\n        nodeRenderer: function(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\r\n          return TreeBuilder._nodeRenderer(name, x, y, height, width, extra,\r\n            id,nodeClass, textClass, textRenderer);\r\n        },\r\n        nodeSize: function(nodes, width, textRenderer) {\r\n          return TreeBuilder._nodeSize(nodes, width, textRenderer);\r\n        },\r\n        nodeSorter: function(aName, aExtra, bName, bExtra) {return 0;},\r\n        textRenderer: function(name, extra, textClass) {\r\n          return TreeBuilder._textRenderer(name, extra, textClass);\r\n        },\r\n      },\r\n      margin: {\r\n        top: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        left: 0\r\n      },\r\n      nodeWidth: 100,\r\n      styles: {\r\n        node: 'node',\r\n        linage: 'linage',\r\n        marriage: 'marriage',\r\n        text: 'nodeText'\r\n      }\r\n    });\r\n\r\n    var data = this._preprocess(data, opts);\r\n    var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\r\n    treeBuilder.create();\r\n\r\n  },\r\n\r\n  _preprocess: function(data, opts) {\r\n\r\n    var siblings = [];\r\n    var id = 0;\r\n\r\n    var root = {\r\n      name: '',\r\n      id: id++,\r\n      hidden: true,\r\n      children: []\r\n    };\r\n\r\n    var reconstructTree = function(person, parent) {\r\n\r\n      // convert to person to d3 node\r\n      var node = {\r\n        name: person.name,\r\n        id: id++,\r\n        hidden: false,\r\n        children: [],\r\n        extra: person.extra,\r\n        textClass: person.textClass ? person.textClass : opts.styles.text,\r\n        class: person.class ? person.class : opts.styles.node\r\n      };\r\n\r\n      // hide linages to the hidden root node\r\n      if (parent == root) {\r\n        node.noParent = true;\r\n      }\r\n\r\n      // apply depth offset\r\n      for (var i = 0; i < person.depthOffset; i++) {\r\n        var pushNode = {\r\n          name: '',\r\n          id: id++,\r\n          hidden: true,\r\n          children: [],\r\n          noParent: node.noParent\r\n        };\r\n        parent.children.push(pushNode);\r\n        parent = pushNode;\r\n      }\r\n\r\n      // sort children\r\n      dTree._sortPersons(person.children, opts);\r\n\r\n      // add \"direct\" children\r\n      _.forEach(person.children, function(child) {\r\n        reconstructTree(child, node);\r\n      });\r\n\r\n      parent.children.push(node);\r\n\r\n      //sort marriages\r\n      dTree._sortMarriages(person.marriages, opts);\r\n\r\n      // go through marriage\r\n      _.forEach(person.marriages, function(marriage, index) {\r\n\r\n        var m = {\r\n          name: '',\r\n          id: id++,\r\n          hidden: true,\r\n          noParent: true,\r\n          children: [],\r\n          extra: marriage.extra\r\n        };\r\n\r\n        var sp = marriage.spouse;\r\n\r\n        var spouse = {\r\n          name: sp.name,\r\n          id: id++,\r\n          hidden: _.get(marriage.spouse, 'hidden', false),\r\n          noParent: true,\r\n          children: [],\r\n          textClass: sp.textClass ? sp.textClass : opts.styles.text,\r\n          class: sp.class ? sp.class : opts.styles.node,\r\n          extra: sp.extra,\r\n          marriageNode: m\r\n        };\r\n\r\n        parent.children.push(m, spouse);\r\n\r\n        dTree._sortPersons(marriage.children, opts);\r\n        _.forEach(marriage.children, function(child) {\r\n          reconstructTree(child, m);\r\n        });\r\n\r\n        siblings.push({\r\n          source: {\r\n            id: node.id\r\n          },\r\n          target: {\r\n            id: spouse.id\r\n          },\r\n          number: index\r\n        });\r\n      });\r\n\r\n    };\r\n\r\n    _.forEach(data, function(person) {\r\n      reconstructTree(person, root);\r\n    });\r\n\r\n    return {\r\n      root: d3.hierarchy(root),\r\n      siblings: siblings\r\n    };\r\n\r\n  },\r\n\r\n  _sortPersons: function(persons, opts) {\r\n    if (persons != undefined) {\r\n      persons.sort(function(a, b) {\r\n        return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\r\n      });\r\n    }\r\n    return persons;\r\n  },\r\n\r\n  _sortMarriages: function(marriages, opts) {\r\n    if (marriages != undefined && Array.isArray(marriages)) {\r\n      marriages.sort(function(marriageA, marriageB) {\r\n        var a = marriageA.spouse;\r\n        var b = marriageB.spouse;\r\n        return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\r\n      });\r\n    }\r\n    return marriages;\r\n  }\r\n\r\n};\r\n\r\nreturn dTree;\r\n\r\n})));\r\n"]}